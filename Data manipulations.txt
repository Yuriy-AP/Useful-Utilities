# (1) Preprocessing:
#############################################
1.1 type of variables
type(data1['date'][0])
data1['date'] = pd.to_datetime(data1['date'])

1.2 Sort by column/ index/ multiple columns:
data1 = data1.sort_values(by = 'date')
data1 = data1.sort_values(by = ['col1', 'col2'], ascending = True)

1.3 Missing values:
DF_obj.isnull().sum()
filled_DF = DF_obj.fillna(0)
fill_DF = DF_obj.fillna(method='ffill')
DF_no_NaN = DF_obj.dropna(axis=0)	# for rows
DF_no_NaN = DF_obj.dropna(axis=1)	# for columns
DF_obj.dropna(how='all')	# drop rows that have only missing values

1.6 Time-series (lag, difference)
1.7 Panel (demean)

1.8 Panel wide-to-long:
< https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.wide_to_long.html >
< https://chrisalbon.com/python/data_wrangling/pandas_long_to_wide/ >
< https://cmdlinetips.com/2019/06/reshaping-dataframes-with-pandas-melt-and-wide_to_long/ >
< https://medium.com/@wangyuw/data-reshaping-with-pandas-explained-80b2f51f88d2 >

stocks_df['date'] = pd.to_datetime(stocks_df['date'])
stocks_df.pivot(index = 'date', columns = 'name', values = 'adj_close').head(3)

# (2) Combining datasets:
#############################################
2.1 Merge
2.2 Append / Combine
2.3 Pivot:
stocks_df.pivot(index = 'date', columns = 'name', values = 'adj_close').head(3)


- Correlations by group (Ch 02_06):
cars_target = cars.iloc[:,9].values
cars_df['group'] = pd.Series(cars_target, dtype="category")
sb.pairplot(cars_df, hue='group', palette='hls')


# (5) Statistical analysis/ Econometrics:
#############################################
(statsmodels.api)
(statsmodels.tsa)

- simple regression
- panel regression
- Diff-in-diff
- Event study

- Time-series:
-- ARIMA with forecast graph:
< https://www.machinelearningplus.com/time-series/arima-model-time-series-forecasting-python/ >
< https://towardsdatascience.com/forecasting-exchange-rates-using-arima-in-python-f032f313fc56 > 


# (6) Output:
##############################################
(1) output table to latex:
statsmodels.api: < https://stackoverflow.com/questions/30011618/statsmodels-summary-to-latex >

model = sm.OLS(y, X)
results = model.fit()
print(results.summary().as_latex())

(2) Any pandas table to latex:
< https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_latex.html >
data.to_latex()


